---
title: Animaciones
slug: animations
date: 0014/01/01
number: 14
contents: "Veremos lo que pasa entre bastidores cuando Meteor cambia un elemento del DOM.|Aprenderemos a animar la reordenación de posts.|Aprenderemos a animar la inserción de nuevos posts."
paragraphs: 58
---

Aunque tenemos un sistema de votación en tiempo real, no tenemos una gran experiencia de usuario en la forma en la que los posts se mueven en la página principal. Usaremos animaciones para suavizar este problema.

### Meteor y el DOM

Antes de poder empezar con la parte divertida (hacer que se muevan las cosas), tenemos que entender cómo interactúa Meteor con el DOM (Document Object Model - la colección de elementos HTML que componen el contenido de una página).

El punto crucial a tener en cuenta es que los elementos del DOM realmente no se pueden "mover". Sin embargo, pueden ser borrados y creados (esto es una limitación del propio DOM, no de Meteor). Así que para crear la ilusión de que los elementos A y B se intercambian, Meteor tendrá que eliminar B e insertar una nueva copia (B') antes del elemento A.

Esto hace de la animación algo complicado ya que no podemos, simplemente mover B a una nueva posición, porque B habrá desaparecido tan pronto como Meteor redibuje de nuevo la página (que, como sabemos, sucede instantáneamente gracias a la reactividad). Pero no te preocupes, encontraremos una forma de hacerlo.

### El corredor ruso

En 1980, en pleno apogeo de la guerra fría, los Juegos Olímpicos se celebraban en Moscú, y los soviéticos estaban decididos a ganar la carrera de 100 metros a cualquier precio. Así que un grupo de brillantes científicos soviéticos equiparon a uno de sus atletas con un teletransportador, y en cuanto sonó el disparo de salida, el corredor fue trasladado de inmediato a la línea de meta.

Afortunadamente, los jueces de la carrera se dieron cuenta de inmediato de la infracción inmediatamente, y el atleta no tuvo más remedio que teletransportarse de nuevo a su casilla de salida, antes de permitirle participar de nuevo corriendo como los demás.

Mis fuentes históricas no son muy fiables, por lo que debes tomar esa historia como cogida con pinzas. Pero trataremos de mantener en mente la analogía del "corredor soviético con teletransportador" a medida que avancemos en este capítulo.

### Analizando el problema detenidamente

Cuando Meteor recibe una actualización y modifica reactivamente el DOM, nuestro post se teletransporta inmediatamente a su posición final, al igual que el corredor soviético. Pero como en los Juegos Olímpicos, en nuestra aplicación, podemos tener alrededor cosas que no se teletransportan. Así que tendremos que teletransportarlo a la "casilla de salida" y hacerlo "correr" (en otras palabras, animarlo) de nuevo hasta la línea de meta.

Para cambiar A y B (situado en las posiciones p1 y p2, respectivamente), tendremos que seguir los siguientes pasos:

1. Borrar B
2. Crear B' antes de A en el DOM
3. Teletransportar B' a p2
4. Teletransportar A a p1
5. Amimar A hasta p2
6. Animar B' hasta p1

El siguiente diagrama explica estos pasos con más detalle:

<%= diagram "animation_diagram", "Intercambiendo dos posts", "pull-center" %>

Se nuevo, en los pasos 3 y 4 no estamos *animando* A y B' hasta sus posiciones sino que las "teletransportamos" allí al instante. Dado que el cambio es instantáneo, parecerá que B no se ha borrado pero ya tenemos posicionados correctamente los elementos para que puedan ser animados hasta su nueva posición.

Afortunadamente, Meteor se ocupa de los pasos 1 y 2, así que sólo tendremos que preocuparnos de los pasos 3 al 6.

Por otra parte, en los pasos 5 y 6 todo lo que estamos haciendo es moviendo los elementos a su lugar correcto. Así que la única parte que realmente necesita de nuestra atención son los pasos 3 y 4, es decir, el envío de los elementos al punto de inicio de la animación.


### Control del tiempo

Hasta ahora hemos hablado de cómo animar nuestros posts, pero no de cuándo hay que animarlos.

Para los pasos 3 y 4, la respuesta será: cuándo cambie la propiedad `_rank` del post (de la que depende la ordenación).

Los pasos 5 y 6 son un poco más complicados. Míralo así: si le dices a un robot muy inteligente que se mueva al norte durante 5 minutos, y luego al sur otros 5, probablemente sabrá deducir que va a terminar en el mismo sitio, y que puede ahorrar energía y hacer bien el  trabajo sin moverse.

Así que si quieres que el robot ande durante 10 minutos, tienes que esperar hasta que recorra los 5 primeros y, a continuación, decirle que vuelva.

El navegador funciona de una manera similar: si le damos dos instrucciones a la vez, las nuevas coordenadas reemplazarán las viejas y no pasaría nada. En otras palabras, el navegador debe registrar los cambios de posición como puntos separados en el tiempo, de lo contrario no será capaz de animarlos.

Meteor no dispone de un callback para manejar esto pero lo podemos simular utilizando `Meteor.setTimeout()`, que simplemente toma una función y aplaza su ejecución unos cuantos milisegundos. 

### Posicionamiento CSS

Para animar los posts que se están reordenando por la página, vamos a tener que meternos en territorio CSS. Sería recomendable una rápida revisión del posicionamiento con CSS.

Los elementos de una página utilizan posicionamiento **estático** por defecto. Los elementos posicionados de forma estática están fijos y sus coordenadas no se pueden cambiar o animar.

Por otra parte, el posicionamiento **relativo**, implica que el elemento está fijado a la página, pero se puede mover con relación a su posición original.

El posicionamiento **absoluto** va un paso más allá y permite dar coordenadas x/y a un elemento en relación al **documento** o **al primer elemento "padre" posicionado de absoluta o relativa**.

Nosotros vamos a usar posicionamiento relativo para animar los posts. Ya disponemos del CSS necesario en `client/stylesheets/style.css`, pero si necesitas añadirlo, este es el código para la hoja de estilo:

~~~css
.post{
  position:relative;
  transition:all 300ms 0ms ease-in;
}
~~~
<%= caption "client/stylesheets/style.css" %>

Esto facilita muchos los pasos 5 y 6: todo lo que necesitamos hacer es configurar la parte `top` a `0px` (su valor predeterminado) y nuestros posts se deslizarán de nuevo a su posición "normal".

Esto significa que nuestro único problema es averiguar desde dónde animar los posts (pasos 3 y 4) con respecto a su nueva posición. En otras palabras, en qué posición hay que ponerlo. Pero, esto no es tan difícil: el desplazamiento correcto es la posición anterior restada a la nueva. 

<% note do %>

### Position:absolute

Podríamos usar `position:absolute` para posicionar los elementos en relación a un elemento padre. Sin embargo, nos encontraremos con una gran desventaja puesto que los elementos con posición absoluta se eliminarán completamente de la página, causando el colapso de su contenedor padre como si éste estuviera vacío.

Esto a su vez significa que necesitaríamos establecer la altura del contenedor desde JavaScript, en vez de dejar que el navegador mueva los elementos de forma natural. En consecuencia, siempre que sea posible es mejor usar posicionamiento relativo.

<% end %>

### Desafío total

Todavía queda un problema por resolver. Mientras que el elemento A persiste en el DOM y de este modo puede "recordar" su posición anterior, el elemento B experimenta una reencarnación y vuelve a la vida como B', mientras se limpia de la memoria.

Así que lo que vamos a hacer es averiguar la posición actual de un post, y luego guardar esa posición en una **colección local**. Una colección local funciona igual que una colección normal, excepo que *sólo* existe en la memoria del navegador (no en el servidor). De esta forma, aun cuando se haya eliminado un post y recreado de nuevo, todavía seremos capaces de saber desde dónde se supone que debemos animarlo.

### Clasificando posts

Hemos estado hablando de clasificar posts, pero esta "clasificación" en realidad no existe como una propiedad en los posts, ya que es sólo una consecuencia del orden en el que se enumeran los posts en nuestra colección. Si queremos ser capaces de animar los mensajes según su clasificación, vamos necesitar evocarla de alguna manera.

Ten en cuenta que no podemos meter la propiedad `rank` (clasificación) en la propia base de datos, ya que es una propiedad que depende de cómo se ordenan los posts (es decir, un post puede ser el primero al ordenar por fecha, pero el tercero al ordenar por puntos).

De forma ideal nos gustaría poner esta propiedad en las colecciones `newPosts` y `topPosts`, pero Meteor no ofrece un mecanismo conveniente para hacerlo todavía.

Así que, en vez de eso, insertaremos `rank` en el último paso posible, el gestor de plantillas `postList`:

~~~js
Template.postsList.helpers({
  postsWithRank: function() {
    this.posts.rewind();
    return this.posts.map(function(post, index, cursor) {
      post._rank = index;
      return post;
    });
  },
  hasMorePosts: function(){
    this.posts.rewind();
    return Router.current().limit() == this.posts.fetch().length;
  }
});
~~~
<%= caption "/client/views/posts/posts_list.js" %>
<%= highlight "2~8" %>

En vez de devolver el cursor `Posts.find({}, {sort: {submitted: -1}, limit: postsHandle.limit()})` como en los otros ayudantes, `postsWithRank` coge el cursor y le añade la propiedad `_rank` a cada uno de sus documentos.

No olvidemos actualizar también la plantilla `postsList`:

~~~html
<template name="postsList">
  <div class="posts">
    {{#each postsWithRank}}
      {{> postItem}}
    {{/each}}
    
    {{#if hasMorePosts}}
      <a class="load-more" href="{{nextPath}}">Load more</a>
    {{/if}}
  </div>
</template>
~~~
<%= caption "/client/views/posts/posts_list.html" %>

<%= highlight "3" %>

<% note do %>

### Está bien, rebobinemos

Meteor es uno de los frameworks más vanguardistas y con más visión de futuro. Pero una de sus características te hace sentir como si volvieras a la época de las cintas de vídeo: la función `rewind()`.

Siempre que utilices un cursor con `forEach()`, `map()` o `fetch()`, tendrás que rebobinar el cursor antes de que esté listo para usarse de nuevo.

Así que en algunos casos, es más seguro hacerlo de forma preventiva en lugar de arriesgarse a introducir un bug. 

<% end %>

### Juntándolo todo

Dado que nuestra animación tendrá efecto en las clases y atributos CSS del DOM, añadiremos el ayudante dinámico `{{attributes}}` a la plantilla `postItem`:

```html
<template name="postItem">
  <div class="post" {{attributes}}>

  //..

</template>
```
<%= caption "/client/views/posts/post_item.html" %>
<%= highlight "2" %>

Usando el ayudante `{{attributes}}` de esta manera, habilitamos además una característica escondida de Spacebars: cualquier propiedad devuelta por los atributos del objeto se mapea en los atributos HTML del elemento del DOM (como `class`, `style`, etc.)

Vamos a ponerlo todo junto creando el ayudante `attributes`:

~~~js
var POST_HEIGHT = 80;
var Positions = new Meteor.Collection(null);

Template.postItem.helpers({

  //..

  attributes: function() {
    var post = _.extend({}, Positions.findOne({postId: this._id}), this);
    var newPosition = post._rank * POST_HEIGHT;
    var attributes = {};
    
    if (! _.isUndefined(post.position)) {
      var offset = post.position - newPosition;      
      attributes.style = "top: " + offset + "px";
      if (offset === 0)
        attributes.class = "post animate"
    }
    
    Meteor.setTimeout(function() {
      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})
    });
    
    return attributes;
  }
});

//..
~~~
<%= caption "/client/views/posts/post_item.js" %>
<%= highlight "1~2, 8~25" %>

Primero establecemos la altura de cada elemento del DOM, en otras palabras, nuestros divs `.post`. Esto presenta el inconveniente obvio de que cualquier cambio en esta altura (por ejemplo, un título de una entrada que ocupe dos líneas) romperá toda nuestra lógica animación. Pero por el bien de mantener las cosas simples, por ahora, vamos a suponer que todos los posts tendrán exactamente 80 píxeles de alto.

A continuación, declaramos una colección local llamada `Positions`. Ten en cuenta que pasar `null` como argumento permite a Meteor saber que se trata de una local (en otras palabras, sólo para el cliente).

Ahora estamos listos para construir nuestro ayudante `attributes`.

<% note do %>

### La lista de ejecuciones

A menudo, puede ser difícil saber cuándo se ejecuta un trozo de código reactivo. Así que echemos una mirada más profunda al ayudante `attributes`.

Como cada ayudante, se ejecutará una vez cuando la plantilla se representa por primera vez. Debido a su dependencia de la propiedad `_rank`, se ejecutará también cada vez que cambie la clasificación de un post. Y, por último, su dependencia de la colección `Positions` significa que también va a ejecutarse cada vez que el elemento en cuestión se modifica.

Esto significa que el ayudante se ejecutará dos o tres veces si cambian varias cosas. Esto puede parecer un desperdicio en un primer momento, pero es así como funciona la reactividad. Una vez que te acostumbras, acaba convirtiéndose en otra forma de pensar en el código.

<% end %>

### El ayudante `attributes`

En primer lugar, buscamos la posición de nuestro post en la colección `Positions` y extendemos `this` (que en este ayudante se corresponde con el post actual) con el resultado de nuestra consulta. A continuación, utilizamos la propiedad `_rank` para averiguar la nueva posición del elemento en el DOM con respecto a la parte superior de la página.

Ahora tenemos que gestionar dos casos distintos: o el ayudante está corriendo porque la plantilla se está representando (caso A), o se está ejecutando de forma reactiva porque ha cambiado una propiedad (caso B).

Sólo queremos animar el elemento en el caso B, por lo que nos aseguramos de que `post.position` está definido (en breve veremos *cómo* está definido).

Lo que es más, el caso B incluye dos sub-casos, B1 y B2: o estamos *teletransportando* el elemento del DOM de nuevo a los "tacos de salida" (su posición anterior), o estamos *animándolo* desde su posición anterior a su nueva posición.

Aquí es donde entra en juego la variable `offset`. Dado que estamos utilizando posicionamiento *relativo*, vamos a querer averiguar dónde enviar el elemento *en relación* a su posición actual. Esto significa restar la nueva posición de la anterior.

Para saber si nos encontramos en el caso B1 o en el B2, podemos mirar el `offset `: si el `offset` es diferente a 0, significa que estamos *moviendo* el elemento *desde* su origen. Por otro lado, si el `offset` es igual a 0, significa que estamos *animando* el elemento *de nuevo* hasta su origen de coordenadas, y podemos añadir la clase `animate` al elemento, aplicando así la transición.

### El tiempo de espera

Las tres situaciones (A, B1, y B2) se activan de forma reactiva cuando cambian ciertas propiedades. En este caso, la función `setTimeout` desencadena la reevaluación del contexto reactivo mediante la modificación de la colección `Positions`.

Así que cuando un usuario carga la página por primera vez, todo el flujo de reactividad es algo como esto:

- El ayudante `attributes` se ejecuta por primera vez.
- `post.position` no está definido **(A)**.
- Se ejecuta `setTimeout` definiendo `post.position`.
- El ayudante `attributes` se ejecuta de nuevo de manera reactiva.
- No ha habido ningún movimiento, por lo el `offset` va de 0 a 0 (sin animación visible) **(B2)**.

Y esto es lo que sucede cuando se detecta un upvote:

- Se modifica `_rank`, lo que provoca una reevaluación del ayudante `attributes`.
- Se define `post.position` **(B)**.
- El `offset` no es igual a 0, por lo que no hay animación **(B1)**
- Se ejecuta `setTimeout`, redefiniendo `post.position`.
- El ayudante `attributes` se ejecuta de manera reactiva.
- El `offset` vuelve a 0 (con animación) **(B2)**.

Ahora abre el sitio y empieza a votar. ¡Deberías ver mensajes moviendose suavemente hacia arriba y hacia abajo como la gracia de un ballet!


<%= commit "14-1", "Añadida la animación de los posts al reordenarse." %>

### Animando los nuevos posts

Nuestros posts se reordenan bien, pero todavía no tenemos una animación para los "nuevos posts". En lugar de que simplemente aparezcan en la parte superior de la lista, vamos a hacer que se introduzcan suavemente.

~~~js
//..

attributes: function() {
  var post = _.extend({}, Positions.findOne({postId: this._id}), this);
  var newPosition = post._rank * POST_HEIGHT;
  var attributes = {};
  
  if (_.isUndefined(post.position)) {
    attributes.class = 'post invisible';
  } else {
    var delta = post.position - newPosition;      
    attributes.style = "top: " + delta + "px";
    if (delta === 0)
      attributes.class = "post animate"
  }
  
  Meteor.setTimeout(function() {
    Positions.upsert({postId: post._id}, {$set: {position: newPosition}})
  });
  
  return attributes;
}

//..
~~~
<%= caption "/client/views/posts/post_item.js" %>
<%= highlight "8~10" %>

Lo que estamos haciendo aquí es aislar el caso **(A)** y añadir la clase CSS `invisible` para el elemento. Cuando se vuelvan a ejecutar los ayudantes de forma reactiva y el elemento obtenga la clase `animate` en su lugar, se animará la diferencia en la opacidad y hará aparecer suavemente el elemento.

<%= commit "14-2", "Hacer aparecer los posts cuando se introducen." %>


<% note do %>

### CSS y JavaScript

Te habrás dado cuenta de que estamos usando la clase CSS `.invisible` para activar la animación en lugar de animar la propiedad de `opacity` directamente como hicimos para `top`. Esto se debe a que para `top`, necesitábamos animar la propiedad a un valor específico que depende de los datos de la instancia actual.

Pero aquí sólo queremos mostrar y ocultar un elemento independiente de sus datos. Y como es una buena idea mantener el CSS fuera de JavaScript en la medida de lo posible, a qué sólo agregamos y eliminamos la clase, y especificamos los detalles de la animación en nuestra hoja de estilos.

<% end %>

Por fin deberíamos tener el comportamiento que buscábamos. Carga la aplicación y ¡juega con ella!. También merece la pena trastear con con la clase `.post.animated` para ver si se pueden aplicar otras transiciones. Sugerencia: [las funciones de aceleración CSS](http://matthewlein.com/ceaser/) son un buen lugar para empezar!