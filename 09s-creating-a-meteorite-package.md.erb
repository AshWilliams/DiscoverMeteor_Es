---
title: Creando un paquete meteorite
slug: creating-a-meteorite-package
date: 0009/01/02
number: 9.5
sidebar: true
contents: Escribiremos un paquete de Meteor para nuestra aplicación de forma local.|Escribiremos tests para nuestro paquete.|Publicaremos el paquete en el repositorio de Atmosphere.
paragraphs: 22
---

Durante nuestro trabajo en los errores, hemos construido un modelo reutilizable, ¿por qué no ponerlo dentro de un paquete y compartirlo con el resto de la comunidad Meteor?

En primer lugar, tenemos que colocar el código del paquete dentro de una estructura. Vamos a hacerlo dentro de un directorio llamado `packages/errors/`. Lo que se pone dentro del directorio `packages` se utiliza de forma automática como paquetes. (Posiblemente, ya te habrás dado cuenta de que Meteorite instala paquetes usando enlaces simbólicos dentro del directorio `packages/`).

En segundo lugar, dentro de nuestro nuevo directorio, crearemos `package.js`, el archivo que informa a Meteor de cómo debe utilizar el paquete, y los símbolos que exporta.

~~~js
Package.describe({
  summary: "A pattern to display application errors to the user"
});

Package.on_use(function (api, where) {
  api.use(['minimongo', 'mongo-livedata', 'templating'], 'client');

  api.add_files(['errors.js', 'errors_list.html', 'errors_list.js'], 'client');

  if (api.export)
    api.export('Errors');
});
~~~
<%= caption "packages/errors/package.js" %>

Vamos a añadir al paquete los tres archivos que se pasan en la llamada a `add_files`. Podemos usar los mismos que tenemos para Microscope, haciendo sólo, unos pequeños cambios para los espacios de nombres y para dejar la API un poco más limpia:

~~~js
Errors = {
  // Local (client-only) collection
  collection: new Meteor.Collection(null),

  throw: function(message) {
    Errors.collection.insert({message: message, seen: false})
  },
  clearSeen: function() {
    Errors.collection.remove({seen: true});
  }
};

~~~
<%= caption "packages/errors/errors.js" %>

~~~html
<template name="meteorErrors">
  {{#each errors}}
    {{> meteorError}}
  {{/each}}
</template>

<template name="meteorError">
  <div class="alert alert-error">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
~~~
<%= caption "packages/errors/errors_list.html" %>

~~~js
Template.meteorErrors.helpers({
  errors: function() {
    return Errors.collection.find();
  }
});

Template.meteorError.rendered = function() {
  var error = this.data;
  Meteor.defer(function() {
    Errors.collection.update(error._id, {$set: {seen: true}});
  });
};
~~~
<%= caption "packages/errors/errors_list.js" %>

### Probando el paquete con Microscope

Vamos a probar el paquete localmente con Microscope para asegurarnos de que nuestros cambios funcionan. Para enlazar el paquete en nuestro proyecto, ejecutaremos `meteor add errors`. A continuación, debemos eliminar los archivos a los que reemplaza el nuevo paquete:

~~~bash
$ rm client/helpers/errors.js
$ rm client/views/includes/errors.html
$ rm client/views/includes/errors.js
~~~
<%= caption "Eliminando los archivos antiguos" %>

Otra cosa que debemos hacer es efectuar algunos pequeños cambios en el código de la aplicación para que use la API correcta:

~~~js
Router.before(function() { Errors.clearSeen(); });
~~~
<%= caption "lib/router.js" %>

~~~html
  {{> header}}
  {{> meteorErrors}}
~~~
<%= caption "client/views/application/layout.html" %>

~~~js
Meteor.call('post', post, function(error, id) {
  if (error) {
    // display the error to the user
    Errors.throw(error.reason);

~~~
<%= caption "client/views/posts/post_submit.js" %>

~~~js
Posts.update(currentPostId, {$set: postProperties}, function(error) {
  if (error) {
    // display the error to the user
    Errors.throw(error.reason);
~~~
<%= caption "client/views/posts/post_edit.js" %>

<%= scommit "9-5-1", "Creado y enlazado un paquete básico." %>

Una vez hechos estos cambios, deberíamos ver el mismo comportamiento que teníamos con el código sin empaquetar.

### Escribiendo tests

El primer paso en el desarrollo de un paquete es probarlo contra una aplicación, pero el siguiente es escribir un conjunto de tests que evalúen adecuadamente el comportamiento del paquete. Meteor incluye Tinytest, que permite ejecutar este tipo de pruebas de forma fácil y, de esta forma, tener la conciencia tranquila cuando compartimos el paquete con los demás.

Vamos a crear un archivo que usa Tinytest para ejecutar tests contra el código de los errores.

~~~js
Tinytest.add("Errors collection works", function(test) {
  test.equal(Errors.collection.find({}).count(), 0);

  Errors.throw('A new error!');
  test.equal(Errors.collection.find({}).count(), 1);

  Errors.collection.remove({});
});

Tinytest.addAsync("Errors template works", function(test, done) {
  Errors.throw('A new error!');
  test.equal(Errors.collection.find({seen: false}).count(), 1);

  // render the template
  UI.insert(UI.render(Template.meteorErrors), document.body);

  // wait a few milliseconds
  Meteor.setTimeout(function() {
    test.equal(Errors.collection.find({seen: false}).count(), 0);
    test.equal(Errors.collection.find({}).count(), 1);
    Errors.clearSeen();

    test.equal(Errors.collection.find({seen: true}).count(), 0);
    done();
  }, 500);
});
~~~
<%= caption "packages/errors/errors_tests.js" %>

Con estos tests comprobamos que las funciones básicas de `Meteor.Errors` funcionan correctamente, así como que el código `mostrado` en la plantilla sigue funcionando bien.

No vamos a cubrir los aspectos específicos sobre cómo escribir tests de paquetes (porque la API todavía no está acabada y podría cambiar mucho), pero viendo el código, puedes hacerte una idea cómo funciona.

Para decirle a Meteor que ejecute los tests, añadimos éste código a `package.js`

~~~js
Package.on_test(function(api) {
  api.use('errors', 'client');
  api.use(['tinytest', 'test-helpers'], 'client');

  api.add_files('errors_tests.js', 'client');
});
~~~
<%= caption "packages/errors/package.js" %>

<%= scommit "9-5-2", "Tests añadidos al paquete." %>

Ya podemos ejecutar los tests con:

~~~bash
$ meteor test-packages errors
~~~
<%= caption "Terminal" %>

<%= screenshot "s7-1", "Pasados todos los tests" %>

### Publicando el paquete

Ahora, queremos liberar el paquete y ponerlo a disposición de todo el mundo. Lo haremos publicándolo en el repositorio Atmosphere.

En primer lugar, tenemos que añadir un archivo llamado `smart.json` dónde pondremos los detalles importantes del paquete para Meteorite y Atmosphere:

~~~json
{
  "name": "errors",
  "description": "A pattern to display application errors to the user",
  "homepage": "https://github.com/tmeasday/meteor-errors",
  "author": "Tom Coleman <tom@thesnail.org>",
  "version": "0.1.0",
  "git": "https://github.com/tmeasday/meteor-errors.git",
  "packages": {
  }
}
~~~
<%= caption "packages/errors/smart.json" %>

<%= scommit "9-5-3", "Añadido smart.json" %>

Ponemos algunos metadatos con la información del paquete, incluyendo lo que hace, el repositorio git donde lo vamos a alojar, y un número de versión. Si nuestro paquete depende a su vez de otros paquetes Atmosphere, podríamos utilizar una sección `"packages"` para definir sus dependencias.

Una vez que todo está en su sitio, publicarlo es fácil. Tenemos que crear un repositorio git, subirlos a un servidor, y enlazar su ubicación en `smart.json`.

El proceso para hacer esto usando [GitHub](http://github.com) es crear un nuevo repositorio, y luego seguir la práctica habitual para meter el código dentro. A continuación, se utiliza el comando `mrt release` para publicarlo:

~~~bash
$ git init
$ git add -A
$ git commit -m "Created Errors Package"
$ git remote add origin https://github.com/tmeasday/meteor-errors.git
$ git push origin master
$ mrt release .
Done!
~~~
<%= caption "Terminal (ejecutar dentro de `packages/errors`)" %>

Nota: Los nombres de los paquetes tienen que ser únicos. Si utilizas el mismo nombre que otro paquete se producirá un conflicto y no funcionará. En el futuro, en Atmosphere, el nombre se construirá con el nombre del paquete seguido del autor, así que es posible que todo esto cambie.

Segunda nota: Tendrás que iniciar sesión en [Atmosphere](http://atmosphere.meteor.com/accounts) y crear un usuario y usar la contraseña para llamar a `mrt release`.

Ahora que hemos publicado el paquete, podemos eliminarlo del proyecto y luego añadirlo de nuevo  directamente con Meteorite:

~~~bash
$ rm -r packages/errors
$ mrt add errors
~~~
<%= caption "Terminal (ejecutar desde el directorio raíz de la aplicación)" %>

<%= scommit "9-5-4", "Paquete eliminado del árbol de desarrollo." %>

Ahora debemos ver a Meteorite descargar nuestro paquete por primera vez. ¡Bien hecho!
