---
title: Reactividad avanzada
slug: advanced-reactivity
date: 0011/01/02
number: 11.5
sidebar: true
contents: Aprenderemos a crear fuentes de datos reactivas.|Crearemos un sencillo ejemplo de una fuente de datos reactiva.|Compararemos  Deps con AngularJS.
paragraphs: 29
---

No es común tener que escribir código de seguimiento de dependencias por ti mismo, pero para comprenderlo es verdaderamente útil trazar el camino de cómo funciona el flujo de dependencias.

Imagina que quisiéramos rastrear a cuántos amigos del usuario actual de Facebook le ha gustado cada post en Microscope. Asumamos que ya hemos trabajado los detalles de cómo autenticar el usuario con Facebook, hacer las llamadas necesarias a la API, y procesar los datos relevantes. Ahora tenemos una función asincrónica del lado del cliente que devuelve el número de "me gusta": `getFacebookLikeCount(user, url, callback)`.

Lo importante a recordar sobre una función de esta naturaleza es que *no es reactiva* ni en tiempo real. Hará un pedido HTTP a Facebook, tomará algunos datos, y los hará disponibles a la aplicación a través de un llamado asincrónico, pero la función no se va a volver a ejecutar por sí sola cuando haya un cambio en Facebook, ni nuestra UI va a cambiar cuando los datos lo hagan.

Para solucionar esto, podemos comenzar utilizando `setInterval` para llamar a la función cada algunos segundos:

~~~js
currentLikeCount = 0;
Meteor.setInterval(function() {
  var postId;
  if (Meteor.user() && postId = Session.get('currentPostId')) {
    getFacebookLikeCount(Meteor.user(), Posts.find(postId), 
      function(err, count) {
        if (!err)
          currentLikeCount = count;
      });
  }
}, 5 * 1000);
~~~

Cada vez que usemos esa variable `currentLikeCount`, podemos esperar obtener el número correcto con un margen de error de cinco segundos. Ahora podemos usar esa variable en un ayudante:

~~~js
Template.postItem.likeCount = function() {
  return currentLikeCount;
}
~~~

Sin embargo, nada le dice todavía a nuestra plantilla que se redibuje cuando cambie `currentLikeCount`. Si bien la variable ahora está en pseudo tiempo real (se cambia a sí misma), no es *reactiva* y por lo tanto todavía no puede comunicarse correctamente con el resto del ecosistema de Meteor.

### Rastreando la Reactividad: Computaciones

La reactividad de Meteor es mediada por *dependencias*, estructuras de datos que rastrean una serie de computaciones.

Como vimos en anteriormente, una computación es una parte de código que usa datos reactivos. En nuestro caso, hay una computación que ha sido implícitamente creada por la plantilla `postItem`. Cada ayudante en el manejador de esa plantilla está funcionando dentro de esa computación.

Puedes pensar de la computación como una parte del código que se "preocupa" por los datos reactivos. Cuando los datos cambien, está computación será informada (a través de `invalidate()`), y es la computación la que debe decidir si algo debe hacerse.

### Transformando una Variable en una Función Reactiva

Para transformar nuestra variable `currentLikeCount` en una fuente de datos reactiva, necesitamos rastrear todas las computaciones que la usan como una dependencia. Esto requiere transformarla de una variable a una función (que devolverá un valor):

~~~js
var _currentLikeCount = 0;
var _currentLikeCountListeners = new Deps.Dependency();

currentLikeCount = function() {
  _currentLikeCountListeners.depend();
  return _currentLikeCount;
}

Meteor.setInterval(function() {
  var postId;
  if (Meteor.user() && postId = Session.get('currentPostId')) {
    getFacebookLikeCount(Meteor.user(), Posts.find(postId), 
      function(err, count) {
        if (!err && count !== _currentLikeCount) {
          _currentLikeCount = count;
          _currentLikeCountListeners.changed();
        }
      });
  }
}, 5 * 1000);
~~~
<%= highlight "1~7,14~17" %>

Lo que hemos hecho es configurar una dependencia `_currentLikeCountListeners`, que rastreará todas las computaciones en las cuales se utilice `currentLikeCount()`. Cuando el valor de `_currentLikeCount` cambie, podemos llamar a la función `changed()` en esa dependencia, que invalida todas las computaciones realizadas.

Estas computaciones pueden luego lidiar con el cambio individualmente. En el caso de una plantilla, esto significaría redibujarse.

### Computación de Plantilla y Controlar Redibujados

La razón por la que cada plantilla tiene su propia computación es para controlar la cantidad de redibujados que suceden en pantalla.

Cuando llamamos a una plantilla desde otra, estamos configurando una segunda computación dentro de la primera. Entonces, cuando los datos reactivos utilizados dentro de la plantilla interna cambien, esa plantilla interna es redibujada pero la *externa* sigue sin cambiar. De esta forma, las computaciones son utilizadas para controlar el alcance de los cambios reactivos.

Meteor además nos da un poco de ayuda adicional para aumentar los mecanismos básicos de anidar plantillas.

Primero, el bloque ayudante `{{#constant}}` *mata* la reactividad dentro de sí mismo, para que los datos que fueron recolectados por los ayudantes dentro del bloque sólo sean usados una vez. Y si la plantilla contenedora es redibujada, el HTML del area "constant" no cambia y se renderiza de la misma manera. Esto hace que las regiones constantes sean una gran forma de manejar "widgets" que no esperan que Meteor redibuje el DOM que está dentro suyo.

La segunda característica que nos ayuda a controlar la reactividad es el bloque ayudante `{{#isolate}}`, que configura una *nueva* computación dentro de una plantilla. En otras palabras, tiene el mismo efecto que mover esa sección de la plantilla hacia una sub-plantilla, en términos de reactividad y redibujo.

De modo que si una de las fuentes de datos reactiva en el bloque aislado cambia, esa área se redibujará, pero el resto de la plantilla no lo hará. Sin embargo, si la plantilla contenedora se redibuja, el área aislada se redibujará también.

### Comparing Deps to Angular

////

////

////

////

////

////

~~~js
$rootScope.$watch('currentLikeCount', function(likeCount) {
  console.log('Current like count is ' + likeCount);
});
~~~

////

////

////

////

~~~js
Meteor.setInterval(function() {
  getFacebookLikeCount(Meteor.user(), Posts.find(postId), 
    function(err, count) {
      if (!err) {
        $rootScope.currentLikeCount = count;
        $rootScope.$apply();
      }
    });
}, 5 * 1000);
~~~
<%= highlight "5~6" %>

////
